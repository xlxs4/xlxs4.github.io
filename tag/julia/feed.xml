<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:media="http://search.yahoo.com/mrss/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:georss="http://www.georss.org/georss">

  <channel>
    <title>
      <![CDATA[  xlxs4  ]]>
    </title>
    <link> https://xlxs4.github.io </link>
    <description>
      <![CDATA[  The Lorekeeper archives.  ]]>
    </description>
    <atom:link
      href="https://xlxs4.github.io/feed.xml"
      rel="self"
      type="application/rss+xml" />


<item>
  <title>
    <![CDATA[  JuliaSim Model Optimizer  ]]>
  </title>
  <link> https://xlxs4.github.io/notes/juliasim-model-optimizer/index.html </link>
  <guid> https://xlxs4.github.io/notes/juliasim-model-optimizer/index.html </guid>
  <description>
    <![CDATA[  Model Calibration and Parameter Estimation w/ JuliaSim  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<div class="page-tag"><i class="fa fa-tag"></i><a href="https://xlxs4.github.io/tag/julia/">julia</a>, <a href="https://xlxs4.github.io/tag/modeling/">modeling</a>, <a href="https://xlxs4.github.io/tag/sciml/">sciml</a></div><div class="franklin-toc"><ol><li>JuliaSim Model Optimizer<ol><li>JuliaSim</li><li>Introduction</li><li>Model Calibration<ol><li>Nonlinear Model Calibration</li></ol></li><li>Model Paradigms<ol><li>Causal Modeling</li><li>Acausal Modeling</li></ol></li></ol></li></ol></div>
<h2 id="juliasim_model_optimizer">JuliaSim Model Optimizer</h2>
<p>Some time ago I attended a remote workshop titled &quot;Model Calibration and Parameter Estimation with JuliaSim Model Optimizer&quot; by the <a href="https://juliahub.com/company/about-us/">JuliaHub</a> team, specifically <a href="https://jvaverka.com/">Jacob Vaverka</a> and <a href="https://chrisrackauckas.com/">Dr. Christopher Rackauckas</a>.</p>
<h3 id="juliasim">JuliaSim</h3>
<p><a href="https://juliahub.com/products/juliasim/">JuliaSim</a> is a cloud-hosted platform for physical simulation. It combines a vast array of bleeding edge <a href="https://sciml.ai/">SciML</a> techniques, acausal equation-based digital twin modeling and simulation and is powered by the <a href="https://julialang.org/">Julia</a> programming language. It is preview-only software in the time of writing this post &#40;December 2022&#41;.</p>
<p>JuliaSim produces surrogates of blackbox &#40;and regular&#41; dynamical systems using <abbr title="Continuous Time Echo State Networks">CTESN</abbr>
s <sup id="fnref:1">[1]</sup>. This technique allows, amongst other features, for implicit training in parameter space to stabilize the ill-conditioning present in stiff systems.</p>
<p>You can leverage these surrogates to accelerate the process and there&#39;s a variety of techniques for quantifying uncertainty and noise &#40;see the virtual populations below&#41;. You can use JuliaSim for parameter estimation and optimal control, which is what this post is about. There&#39;s the so-called <a href="https://help.juliahub.com/juliasim/stable/ModelLibrary/">Model Library</a>, a collection of acausal &#40;equation-based&#41; components with pre-trained surrogates of models that are ready to use. You can thus discover and import/exchange various models, and combine yours with pre-built models and digital twins. Lastly, there&#39;s specialized numerical environments available for use upon demand. Everything can happen on the JuliaHub cloud-based IDE.</p>
<figure class="figure">
  <img src="./assets/juliahub.png" alt="A visual overview of JuliaHub." class="figure-img img-fluid " width="" >
  <figcaption class="figure-caption ">
A visual overview of JuliaHub.
</figcaption></figure><p>If you want to build models, you can use the pre-made model libraries, e.g. <a href="https://help.juliahub.com/CellMLPhysiome/dev/">CellMLPhysiome.jl</a> and <a href="https://help.juliahub.com/SBMLBioModels/stable/">SBMLBioModels.jl</a>. You can use the <a href="https://github.com/SciML/Catalyst.jl">Catalyst.jl</a> and <a href="https://github.com/SciML/ModelingToolkit.jl">ModelingToolkit.jl</a> GUIs. If you want to generate models using existing data, you can use a Digital Twin generator. If you want to generate data using existing models, you can use a Surrogatizer and more.</p>
<figure class="figure">
  <img src="./assets/surrogatizer.png" alt="The JuliaSim Surrogatizer GUI." class="figure-img img-fluid " width="" >
  <figcaption class="figure-caption ">
The JuliaSim Surrogatizer GUI.
</figcaption></figure><figure class="figure">
  <img src="./assets/surrogate-dashboard.png" alt="The Surrogate Diagnostic Summary interactive dashboard." class="figure-img img-fluid " width="" >
  <figcaption class="figure-caption ">
The Surrogate Diagnostic Summary interactive dashboard.
</figcaption></figure><h3 id="introduction">Introduction</h3>
<figure class="figure">
  <img src="./assets/juliasim.png" alt="JuliaSim at a glance." class="figure-img img-fluid " width="" >
  <figcaption class="figure-caption ">
JuliaSim at a glance.
</figcaption></figure><p>The Model Optimizer is a Julia package available on the JuliaHub platform named <code>JuliaSimModelOptimizer</code>. It contains methodology to perform model calibration and analysis inside a <abbr title="High-Performance Computing">HPC</abbr>
 environment in a user-friendly manner. It&#39;s a robust and automated framework to scale large and complex models.</p>
<h3 id="model_calibration">Model Calibration</h3>
<p>A typical model calibration pipeline looks like the following:</p>
<ol>
<li><p>First, simulate a parameter combination \(\theta_i\) somewhere in the parameter space. Feed the parameters in the model, which outputs the model prediction for \(\theta_i\).</p>
</li>
<li><p>Then collect &#40;experimental&#41; data for the same \(\theta_i\) combinations &#40;or vice-versa&#41;.</p>
</li>
<li><p>Lastly, combine model prediction and observed data to tune \(\theta_i\) so that the prediction better fits the data, using a loss &#40;usually error&#41; function for optimization.</p>
</li>
</ol>
<figure class="figure">
  <img src="./assets/model-calibration.png" alt="Model calibration via optimization in Model Optimizer." class="figure-img img-fluid " width="" >
  <figcaption class="figure-caption ">
Model calibration via optimization in Model Optimizer.
</figcaption></figure><h4 id="nonlinear_model_calibration">Nonlinear Model Calibration</h4>
<p>There&#39;s three main challenges that can arise if trying to calibrate a model when nonlinearity is introduced. Nonlinear calibration is significantly harder, mainly because:</p>
<ol>
<li><p>Nonlinear optimization can easily hit local minima.</p>
</li>
<li><p>Optimization procedures/algorithms are usually serial.</p>
</li>
<li><p>Model parameters can be unidentifiable from data.</p>
</li>
</ol>
<figure class="figure">
  <img src="./assets/model-calibration-challenges.png" alt="The challenges of Nonlinear Calibration." class="figure-img img-fluid " width="" >
  <figcaption class="figure-caption ">
The challenges of Nonlinear Calibration.
</figcaption></figure><p>To address the first challenge — how do we avoid local optima? We can leverage specialized methods from Model Optimizer. There&#39;s a variety of calibration methods available. Which one to choose is going to ultimately depend on the specific problem at hand.</p>
<p>To address the second challenge — how do we do effective parallelism on a particular strategy that we&#39;re deploying? How do we leverage large-scale cloud compute systems to solve these problems? Proper strategy selection plays a big role here. You can enable parallelism with certain calibration strategies. Multiple shooting is one example that can be parallelized, so if it&#39;s an effective strategy for the case at hand it can help us break out the serial of execution. Note that some of the available techniques are more amenable to distributed compute.</p>
<figure class="figure">
  <img src="./assets/avoiding-local-optima.png" alt="Robust nonlinear calibration strategies." class="figure-img img-fluid " width="" >
  <figcaption class="figure-caption ">
Robust nonlinear calibration strategies.
</figcaption></figure><p>Lastly, to address the third challenge — how do we quantify the uncertainty in the fit? The answer is by introducing a Model Optimizer concept called Virtual Populations. Virtual Populations are sets of parameters which sufficiently fit all trials, all observations. A trial is a different variation of the model which can be ran, it describes an experiment. It&#39;s a data observation. We can have collections of trials, multiple trials. Having a collection allows us to define multi-simulation optimization problems. We&#39;ll see what this means in practice later on in this post, it essentially is a a way to synthesize data to repeat stochastic optimization to better understand the parameter landscape and be able to quantify the uncertainty of global optima in the conditions observed.</p>
<figure class="figure">
  <img src="./assets/virtual-populations.png" alt="Quantifying uncertainty using Virtual Populations." class="figure-img img-fluid " width="" >
  <figcaption class="figure-caption ">
Quantifying uncertainty using Virtual Populations.
</figcaption></figure><h3 id="model_paradigms">Model Paradigms</h3>
<p>So we&#39;ve seen how model calibration could work at a high level, we&#39;ve taken a look at some problems that might arise in nonlinear calibration, and how Model Optimizer tackles these problems, including the concept of virtual populations which is also very helpful for another reason we&#39;ll look into below. Before we get to really see how all of this could work in action, we need to discuss different modeling paradigms. How do we create these simulations and have something that we can apply these Model Optimizer techniques to?</p>
<h4 id="causal_modeling">Causal Modeling</h4>
<p>In causal modeling, we describe the causal mechanisms of a system. The way that this works is we provide clear rules for the interactions between functional blocks. Here we&#39;re worried about the flow of computation — one could draw an analogy linking causal modeling with the imperative programming paradigm.</p>
<figure class="figure">
  <img src="./assets/causal-modeling.png" alt="Causal Block diagram in Simulink by The Mathworks." class="figure-img img-fluid " width="" >
  <figcaption class="figure-caption ">
Causal Block diagram in Simulink by The Mathworks.
</figcaption></figure><h4 id="acausal_modeling">Acausal Modeling</h4>
<p>Instead, in causal modeling we describe the behavior and the properties of the model components. Then, the models are built up out of the composition of the components. The overall dynamics of the model fall out of the cumulative behavior of the composition. This is more akin to the declarative programming paradigm. We only worry about the connections and the relationships between these functional blocks — we don&#39;t want to frame the problem particularly in terms of the flow of computation that has to happen, we want to think instead about individual components and the relationships between one another.</p>
<figure class="figure">
  <img src="./assets/acausal-modeling.png" alt="Acausal modeling in <a href='https://sciml.ai/'>ModelingToolkit.jl</a>, part of the SciML suite." class="figure-img img-fluid " width="" >
  <figcaption class="figure-caption ">
Acausal modeling in <a href='https://sciml.ai/'>ModelingToolkit.jl</a>, part of the SciML suite.
</figcaption></figure><p>There&#39;s some key advantages to following the acausal modeling paradigm. Acausal modeling can be expressive. This allows us to think like scientists and engineers instead of being limited in framing the problem only in terms of how to compute the results. Acausal modeling can be concise. This can allow us to build large-scale models by connecting well-tested components. Acausal modeling can be reusable. We can bring these well-tested components and entire component models with us to build new systems.</p>
<figure class="figure">
  <img src="./assets/why-acausal-modeling.png" alt="Following the acausal modeling paradigm comes with important perks." class="figure-img img-fluid " width="" >
  <figcaption class="figure-caption ">
Following the acausal modeling paradigm comes with important perks.
</figcaption></figure><table class="fndef" id="fndef:1">
    <tr>
        <td class="fndef-backref">[1]</td>
        <td class="fndef-content">Anantharaman, R., Ma, Y., Gowda, S., Laughman, C., Shah, V., Edelman, A., &amp; Rackauckas, C. &#40;2020&#41;. Accelerating simulation of stiff nonlinear systems using continuous-time echo state networks. <em>arXiv preprint arXiv:2010.04004</em>.</td>
    </tr>
</table> ]]>
  </content:encoded>
    
  <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Orestis Ousoultzoglou</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  Hello, world&#33;  ]]>
  </title>
  <link> https://xlxs4.github.io/notes/welcome/index.html </link>
  <guid> https://xlxs4.github.io/notes/welcome/index.html </guid>
  <description>
    <![CDATA[  Welcome to my personal website and my first blog entry&#33;  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<div class="page-tag"><i class="fa fa-tag"></i><a href="https://xlxs4.github.io/tag/julia/">julia</a>, <a href="https://xlxs4.github.io/tag/welcome/">welcome</a></div><h2 id="hi">Hi&#33;</h2>
<p>This is my first post&#33; Time to celebrate &#127881;</p>
<p>Although I have been having the idea of creating a website for a long time, it took me until the start of my thesis to finally sit down and get going. After some attempts with Hugo, Jekyll and so on, I thought: &quot;Why not try to use the <a href="https://julialang.org/">Julia</a> programming language for my website?&quot; Luckily, there exists the package <a href="https://franklinjl.org">Franklin</a> that allows to do exactly that. Even luckier, I came across <a href="https://fredrikekre.se">this pretty website</a> by <a href="https://github.com/fredrikekre">Fredrik Ekre</a>, which Max Kolowski took as a template. I, in turn, was inspired by <a href="https://maximikos.github.io/">his design</a>. And voilà&#33; Here we go &#128512;.</p>
 ]]>
  </content:encoded>
    
  <pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Orestis Ousoultzoglou</atom:name>
  </atom:author>
        
</item>
</channel></rss>